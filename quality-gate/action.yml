name: Quality Gate
description: Enforce a quality gate on your software project.
inputs:
  secrets-account-key:
    description: |
      The service account key which will be used to access CI/CD pipeline secrets.
      This must be set unless the `QUALITY_GATE_TOKEN` environment variable is set
      with the access token for the service provider.
  github-token:
    description: The GitHub Actions token.
    default: ${{ github.token }}
  collection:
    description: |
      The collection name under which the project will be sorted. This can be a
      team name or a category. This can be used to organize projects within
      the quality gate reporting dashboards.
    required: true
runs:
  using: composite
  steps:
    - name: Resolve quality gate access token
      if: env.QUALITY_GATE_TOKEN == ''
      uses: extenda/actions/gcp-secret-manager@v0
      with:
        service-account-key: ${{ inputs.secrets-account-key }}
        secrets: |
          QUALITY_GATE_TOKEN: qodana-organization-token

    - name: Setup Qodana
      uses: extenda/actions/setup-qodana@feat/quality-gate
      id: setup-qodana
      with:
        qodana-token: ${{ env.QUALITY_GATE_TOKEN }}
        qodana-team: ${{ inputs.collection }}
        github-token: ${{ inputs.github-token }}

    - name: Scan with Qodana
      uses: extenda/qodana-action@feat/issue-number-discovery
      if: ${{ !contains(github.event.head_commit.message, '[skip quality]') }}
      with:
        args: ${{ steps.setup-qodana.outputs.args }}
        github-token: ${{ inputs.github-token }}
        pr-mode: ${{ steps.setup-qodana.outputs.pr-mode }}
      env:
        QODANA_TOKEN: ${{ steps.setup-qodana.outputs.project-token }}

    - name: Update qodana.sarif.json issues baseline
      if: always() && steps.setup-qodana.outputs.generate-baseline == 'true'
      id: update-baseline
      run: |
        if [ -f qodana.sarif.json ]; then
          echo "User-provided qodana.sarif.json exists. Baseline automation disabled."
          echo "rerun=false" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        generated_baseline="${{ runner.temp }}/qodana/results/qodana.sarif.json"
        if [ -f "$generated_baseline" ]; then
          cp "$generated_baseline" generated-qodana.sarif.json
          echo "TODO: Here we would upload $generated_baseline to GCS"
          echo "rerun=true" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - name: Rerun Qodana with issues baseline
      uses: extenda/qodana-action@feat/issue-number-discovery
      if: always() && steps.update-baseline.outputs.rerun == 'true'
      with:
        args: ${{ steps.setup-qodana.outputs.args }},--baseline,generated-qodana.sarif.json
        github-token: ${{ inputs.github-token }}
        pr-mode: ${{ steps.setup-qodana.outputs.pr-mode }}
      env:
        QODANA_TOKEN: ${{ steps.setup-qodana.outputs.project-token }}
