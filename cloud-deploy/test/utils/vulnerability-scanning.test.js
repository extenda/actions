const exec = require('@actions/exec');
const runScan = require('../../src/utils/vulnerability-scanning');
const slackNotify = require('../../../slack-notify/src/slack-notify');
const { saveVulnerabilities } = require('../../src/utils/send-request');
const fs = require('fs');
jest.mock('@actions/exec');
jest.mock('@actions/core');
jest.mock('../../../slack-notify/src/slack-notify');
jest.mock('../../src/utils/send-request');
jest.mock('fs');

const result = `eu.gcr.io/extenda/iam-das-sync-worker:v0.3.2 (debian 9.13)
==========================================================
Total: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 2, CRITICAL: 1)

usr/src/app/package-lock.json
=============================
Total: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)`;

describe('Run scan and notify on slack', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  test('Can run scan without issues', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockResolvedValueOnce('convertion completed');
    await runScan('service-account', 'ubuntu');
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('Can run scan even when slackNotify fails', async () => {
    slackNotify.mockRejectedValueOnce(
      new Error("Couldn't fetch slack secrets!"),
    );
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockResolvedValueOnce('convertion completed');
    jest.spyOn(fs, 'readFileSync').mockReturnValueOnce(result);
    await expect(
      runScan('service-account', 'ubuntu', 'service'),
    ).resolves.not.toThrow();
    expect(slackNotify).toHaveBeenCalledTimes(1);
    expect(slackNotify).toHaveBeenCalledWith(
      'service-account',
      'Total vulnerabilities found on ubuntu: 5\n' +
        '  High: 3\n' +
        '  Critical: 1\n' +
        '  ',
      '',
      'service-scanReport.txt',
    );
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('Build report correctly', async () => {
    // install mock
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockResolvedValueOnce('convertion completed');
    // read file in image scan
    jest.spyOn(fs, 'readFileSync').mockReturnValueOnce(result);

    await runScan('service-account', 'ubuntu', 'service');
    expect(slackNotify).toHaveBeenCalledTimes(1);
    expect(slackNotify).toHaveBeenCalledWith(
      'service-account',
      'Total vulnerabilities found on ubuntu: 5\n' +
        '  High: 3\n' +
        '  Critical: 1\n' +
        '  ',
      '',
      'service-scanReport.txt',
    );
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('Send vulnerabilities', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockResolvedValueOnce('convertion completed');
    saveVulnerabilities.mockResolvedValueOnce('success');
    jest.spyOn(fs, 'readFileSync').mockReturnValueOnce(result);
    await runScan('service-account', 'ubuntu', 'service', 'labels');

    expect(saveVulnerabilities).toHaveBeenCalledTimes(1);
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('writes compact report for normal scan data', async () => {
    const scanJson = JSON.stringify({
      Results: [
        {
          Vulnerabilities: [
            {
              Severity: 'HIGH',
              VulnerabilityID: 'CVE-2025-9900',
              PkgName: 'libtiff-dev',
              Title: 'libtiff: Libtiff Write-What-Where',
            },
            {
              Severity: 'CRITICAL',
              VulnerabilityID: 'CVE-2025-9999',
              PkgName: 'openssl',
              Title: 'openssl: Buffer overflow',
            },
            {
              Severity: 'MEDIUM',
              VulnerabilityID: 'CVE-2025-8888',
              PkgName: 'curl',
              Title: 'curl: Some medium issue',
            },
            {
              Severity: 'LOW',
              VulnerabilityID: 'CVE-2025-7777',
              PkgName: 'zlib',
              Title: 'zlib: Some low issue',
            },
            {
              Severity: 'UNKNOWN',
              VulnerabilityID: 'CVE-2025-6666',
              PkgName: 'foo',
              Title: 'foo: Unknown issue',
            },
          ],
        },
      ],
    });
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockResolvedValueOnce('convertion completed');
    jest.spyOn(fs, 'existsSync').mockReturnValue(true);
    fs.readFileSync.mockReturnValue(scanJson);
    jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {});
    await runScan('svc', 'img:v1', 'svc');
    expect(fs.writeFileSync).toHaveBeenCalledWith(
      'svc-scanReport.txt',
      expect.stringContaining('Service: svc'),
      'utf8',
    );
    expect(fs.writeFileSync).toHaveBeenCalledWith(
      'svc-scanReport.txt',
      expect.stringContaining('HIGH'),
      'utf8',
    );
    expect(fs.writeFileSync).toHaveBeenCalledWith(
      'svc-scanReport.txt',
      expect.stringContaining('CRITICAL'),
      'utf8',
    );
  });

  test('writes compact report for empty scan data', async () => {
    const scanJson = JSON.stringify({ Results: [] });
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockResolvedValueOnce('convertion completed');
    jest.spyOn(fs, 'existsSync').mockReturnValue(true);
    fs.readFileSync.mockReturnValue(scanJson);
    jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {});
    await runScan('svc', 'img:v1', 'svc');
    expect(fs.writeFileSync).toHaveBeenCalledWith(
      'svc-scanReport.txt',
      expect.stringContaining('No vulnerabilities found'),
      'utf8',
    );
  });

  test('does not write report if scanReport.json missing', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockResolvedValueOnce('convertion completed');
    jest.spyOn(fs, 'existsSync').mockReturnValue(false);
    jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {});
    await runScan('svc', 'img:v1', 'svc');
    expect(fs.writeFileSync).not.toHaveBeenCalled();
  });
});

describe('convertToReportCompact severity ordering', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  test('orders vulnerabilities by severity', async () => {
    const scanJson = JSON.stringify({
      Results: [
        {
          Vulnerabilities: [
            {
              Severity: 'LOW',
              VulnerabilityID: 'CVE-LOW',
              PkgName: 'pkg1',
              Title: 'Low vuln',
            },
            {
              Severity: 'CRITICAL',
              VulnerabilityID: 'CVE-CRIT',
              PkgName: 'pkg2',
              Title: 'Critical vuln',
            },
            {
              Severity: 'HIGH',
              VulnerabilityID: 'CVE-HIGH',
              PkgName: 'pkg3',
              Title: 'High vuln',
            },
            {
              Severity: 'MEDIUM',
              VulnerabilityID: 'CVE-MED',
              PkgName: 'pkg4',
              Title: 'Medium vuln',
            },
            {
              Severity: 'UNKNOWN',
              VulnerabilityID: 'CVE-UNK',
              PkgName: 'pkg5',
              Title: 'Unknown vuln',
            },
          ],
        },
      ],
    });
    const expectedOrder = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'UNKNOWN'];
    exec.exec.mockResolvedValue('ok');
    fs.existsSync.mockReturnValue(true);
    fs.readFileSync.mockReturnValue(scanJson);
    let written = '';
    fs.writeFileSync.mockImplementation((file, content) => {
      written = content;
    });
    await runScan('svc', 'img:v1', 'svc');
    const lines = written
      .split('\n')
      .filter((l) => l.match(/CRITICAL|HIGH|MEDIUM|LOW|UNKNOWN/));
    const foundOrder = lines
      .slice(1)
      .map((l) => l.match(/CRITICAL|HIGH|MEDIUM|LOW|UNKNOWN/)[0]);
    expect(foundOrder).toEqual(expectedOrder);
  });
});
