const exec = require('@actions/exec');
const runScan = require('../../src/utils/vulnerability-scanning');
const slackNotify = require('../../../slack-notify/src/slack-notify');
const { sendVulnerabilityCount } = require('../../src/utils/send-request');
const fs = require('fs');
jest.mock('@actions/exec');
jest.mock('@actions/core');
jest.mock('../../../slack-notify/src/slack-notify');
jest.mock('../../src/utils/send-request');
jest.mock('fs');

const result = `eu.gcr.io/extenda/iam-das-sync-worker:v0.3.2 (debian 9.13)
==========================================================
Total: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 2, CRITICAL: 1)

usr/src/app/package-lock.json
=============================
Total: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)`;

describe('Run scan and notify on slack', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  test('Can run scan without issues', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    await runScan('service-account', 'ubuntu');
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('Can run scan with scan error', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockRejectedValueOnce('scan could not be completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    jest.spyOn(fs, 'readFileSync').mockReturnValueOnce(result);
    await runScan('service-account', 'ubuntu');
    expect(exec.exec).toHaveBeenCalledTimes(4);
  });

  test('Can run scan even when slackNotify fails', async () => {
    slackNotify.mockRejectedValueOnce(
      new Error("Couldn't fetch slack secrets!"),
    );
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    jest.spyOn(fs, 'readFileSync').mockReturnValueOnce(result);
    await expect(
      runScan('service-account', 'ubuntu', 'service'),
    ).resolves.not.toThrow();
    expect(slackNotify).toHaveBeenCalledTimes(1);
    expect(slackNotify).toHaveBeenCalledWith(
      'service-account',
      'Total vulnerabilities found on ubuntu: 5\n' +
        '  Unknown: 0\n' +
        '  Low: 1\n' +
        '  Medium: 2\n' +
        '  High: 3\n' +
        '  Critical: 1\n' +
        '  ',
      '',
      'scanReport.scan',
    );
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('Build report correctly', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    jest.spyOn(fs, 'readFileSync').mockReturnValueOnce(result);
    await runScan('service-account', 'ubuntu', 'service');
    expect(slackNotify).toHaveBeenCalledTimes(1);
    expect(slackNotify).toHaveBeenCalledWith(
      'service-account',
      'Total vulnerabilities found on ubuntu: 5\n' +
        '  Unknown: 0\n' +
        '  Low: 1\n' +
        '  Medium: 2\n' +
        '  High: 3\n' +
        '  Critical: 1\n' +
        '  ',
      '',
      'scanReport.scan',
    );
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('Send vulnerability count', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    sendVulnerabilityCount.mockResolvedValueOnce('success');
    jest.spyOn(fs, 'readFileSync').mockReturnValueOnce(result);
    await runScan('service-account', 'ubuntu', 'service');

    expect(sendVulnerabilityCount).toHaveBeenCalledTimes(1);
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });
});
