const exec = require('@actions/exec');
const core = require('@actions/core');
const notifySlack = require('../../../slack-notify/src/slack-notify');
const fs = require('fs');
const { sendVulnerabilityCount } = require('./send-request');

const runImageScan = async (image, silent = true) => {
  let output = '';
  await exec.exec(
    'trivy',
    [
      'image',
      image,
      '--timeout=900s',
      '-o',
      'scanReport.scan',
      '--db-repository=ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db',
    ],
    {
      silent,
      listeners: {
        stdout: (data) => {
          output += data.toString('utf8');
        },
      },
    },
  );
  return output;
};

const buildReport = async (scanReport, image) => {
  let results = [];
  const totResults = [0, 0, 0, 0, 0, 0];
  const scanResults = scanReport.split(/\r?\n/);
  for (let i = 0; i < scanResults.length; i += 1) {
    const line = scanResults[i];
    if (line.startsWith('Total:')) {
      results = line.match(
        /Total: ([0-9]+) \(UNKNOWN: ([0-9]+), LOW: ([0-9]+), MEDIUM: ([0-9]+), HIGH: ([0-9]+), CRITICAL: ([0-9]+)\)/,
      );
      totResults[0] += parseInt(results[1], 10);
      totResults[1] += parseInt(results[2], 10);
      totResults[2] += parseInt(results[3], 10);
      totResults[3] += parseInt(results[4], 10);
      totResults[4] += parseInt(results[5], 10);
      totResults[5] += parseInt(results[6], 10);
    }
  }

  return {
    MESSAGE: `Total vulnerabilities found on ${image}: ${totResults[0]}
  Unknown: ${totResults[1]}
  Low: ${totResults[2]}
  Medium: ${totResults[3]}
  High: ${totResults[4]}
  Critical: ${totResults[5]}
  `,
    HIGH: totResults[4],
    CRITICAL: totResults[5],
  };
};

const installTrivy = async () => {
  process.env.TRIVY_DISABLE_VEX_NOTICE = 'DISABLED';
  await exec.exec(
    'wget',
    [
      'https://github.com/aquasecurity/trivy/releases/download/v0.58.0/trivy_0.58.0_Linux-64bit.deb',
    ],
    {
      silent: true,
    },
  );
  await exec.exec('sudo dpkg', ['-i', 'trivy_0.58.0_Linux-64bit.deb'], {
    silent: true,
  });
};

const scanImage = async (image) => {
  let rerunScan = false;
  await runImageScan(image).catch(() => {
    rerunScan = true;
  });
  // temporary fix, rerun scan on error
  if (rerunScan) {
    await runImageScan(image, false).catch((err) => {
      core.error(err);
    });
  }
  var scanResults = null;
  try {
    scanResults = fs.readFileSync('scanReport.scan', 'utf-8');
  } catch (error) {
    core.error(error);
  }
  if (scanResults) {
    const report = await buildReport(scanResults, image);
    core.info(report.MESSAGE);
    core.startGroup('full vulnerability scan report');
    core.info(scanResults);
    core.endGroup();
    return report;
  }
  return false;
};

const notify = async (serviceAccount, serviceName, report) => {
  if (report && report.CRITICAL > 0) {
    core.info('Sending slack notification');
    await notifySlack(serviceAccount, report.MESSAGE, '', 'scanReport.scan');
    await sendVulnerabilityCount(serviceName, report.CRITICAL);
  }
};

const runScan = async (serviceAccount, image, serviceName) =>
  installTrivy()
    .then(() =>
      scanImage(image).then((report) =>
        notify(serviceAccount, serviceName, report).catch((error) =>
          core.error(error),
        ),
      ),
    )
    .catch((err) => core.error(err));

module.exports = runScan;
