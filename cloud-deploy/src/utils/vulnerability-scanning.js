const exec = require('@actions/exec');
const core = require('@actions/core');
const notifySlack = require('../../../slack-notify/src/slack-notify');
const fs = require('fs');
const { saveVulnerabilities } = require('./send-request');

const runImageScan = async (image, silent = true) => {
  let output = '';
  await exec
    .exec(
      'trivy',
      [
        'image',
        image,
        '--timeout=900s',
        '-o',
        'scanReport.json',
        '--db-repository=ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db',
        '--format=json',
        '--severity=CRITICAL,HIGH',
        '--ignore-unfixed',
      ],
      {
        silent,
        listeners: {
          stdout: (data) => {
            output += data.toString('utf8');
          },
        },
      },
    )
    .then(() => convertToReport());
  return output;
};

const convertToReport = async (silent = true) => {
  let output = '';
  await exec.exec(
    'trivy',
    ['convert', 'scanReport.json', '--format=table', '-o', 'scanReport.txt'],
    {
      silent,
      listeners: {
        stdout: (data) => {
          output += data.toString('utf8');
        },
      },
    },
  );
  return output;
};

const buildReport = async (scanReport, image) => {
  let results = [];
  const totResults = [0, 0, 0, 0, 0, 0];
  const scanResults = scanReport.split(/\r?\n/);
  for (let i = 0; i < scanResults.length; i += 1) {
    const line = scanResults[i];
    if (line.startsWith('Total:')) {
      results = line.match(
        /Total: ([0-9]+) \(UNKNOWN: ([0-9]+), LOW: ([0-9]+), MEDIUM: ([0-9]+), HIGH: ([0-9]+), CRITICAL: ([0-9]+)\)/,
      );
      totResults[0] += parseInt(results[1], 10);
      totResults[1] += parseInt(results[2], 10);
      totResults[2] += parseInt(results[3], 10);
      totResults[3] += parseInt(results[4], 10);
      totResults[4] += parseInt(results[5], 10);
      totResults[5] += parseInt(results[6], 10);
    }
  }

  return {
    MESSAGE: `Total vulnerabilities found on ${image}: ${totResults[0]}
  High: ${totResults[4]}
  Critical: ${totResults[5]}
  `,
    HIGH: totResults[4],
    CRITICAL: totResults[5],
    scanReport,
  };
};

const installTrivy = async () => {
  process.env.TRIVY_DISABLE_VEX_NOTICE = 'DISABLED';
  await exec.exec(
    'wget',
    [
      'https://github.com/aquasecurity/trivy/releases/download/v0.58.0/trivy_0.58.0_Linux-64bit.deb',
    ],
    {
      silent: true,
    },
  );
  await exec.exec('sudo dpkg', ['-i', 'trivy_0.58.0_Linux-64bit.deb'], {
    silent: true,
  });
};

const scanImage = async (image) => {
  return await runImageScan(image).then(() =>
    buildReport(fs.readFileSync('scanReport.txt', 'utf-8'), image)
      .then((report) => {
        core.info(report.MESSAGE);
        core.startGroup('full vulnerability scan report');
        core.info(report.scanReport);
        core.endGroup();
        return report;
      })
      .catch(() => core.error('no report generated')),
  );
};

const notify = async (serviceAccount, serviceName, report, labels) => {
  if (report && report.CRITICAL > 0) {
    core.info('Sending slack notification');
    await notifySlack(serviceAccount, report.MESSAGE, '', 'scanReport.txt');
  }
  return await saveVulnerabilities(
    serviceName,
    fs.readFileSync('scanReport.json', 'utf-8'),
    labels,
    `https://github.com/${process.env.GITHUB_REPOSITORY}`,
  );
};

const runScan = async (serviceAccount, image, serviceName, labels) =>
  installTrivy()
    .then(() =>
      scanImage(image).then((report) =>
        notify(serviceAccount, serviceName, report, labels).catch((error) =>
          core.error(error),
        ),
      ),
    )
    .catch((err) => core.error(err));

module.exports = runScan;
