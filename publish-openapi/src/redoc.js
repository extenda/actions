const exec = require('@actions/exec');
const core = require('@actions/core');
const fs = require('fs');

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const updateIndex = async (file, addToIndex) => {
  const index = `<html>
<title>extenda retail</title>
<table style="width:50%;margin-left:auto;margin-right:auto;">
  <tr>
    <th>API Name</th>
    <th>Version</th>
  </tr>
  ThisWillBeAutoGenerated
</table>
</html>`;
  const result = index.replace(/ThisWillBeAutoGenerated/g, addToIndex);

  fs.writeFile(file, result, 'utf8', (err) => {
    if (err) { core.error(err); }
  });
};

const installRedoc = async () => exec.exec('sudo', [
  'npm',
  'install',
  'redoc-cli',
  '-global',
], {
  silent: true,
});

const buildApiDocs = async (openApiYaml, apiName) => exec.exec('redoc-cli', [
  'bundle',
  openApiYaml,
  '-o',
  `${apiName}/index.html`,
  '--options.nativeScrollbars',
  '--options.hideSingleRequestSampleTab',
  '--options.onlyRequiredInSamples',
  '--cdn',
], {
  silent: true,
});

const uploadApiDocs = async (bucket, apiName) => exec.exec('gsutil', [
  'cp',
  '-r',
  `${apiName}`,
  bucket,
], {
  silent: true,
});

const uploadIndex = async (file, bucket) => exec.exec('gsutil', [
  'cp',
  file,
  bucket,
], {
  silent: true,
});

const fetchDocList = async (bucket) => {
  let output = '';
  await exec.exec('gsutil', [
    'ls',
    bucket,
  ], {
    silent: true,
    listeners: {
      stdout: (data) => {
        output += data.toString('utf8');
      },
    },
  });
  return output.split(/[\r\n]+/);
};

const buildIndex = async (apiList, bucket) => {
  let addToIndex = '';
  apiList.forEach((line) => {
    if (line.endsWith('/')) {
      const apiName = line.substr(bucket.length);
      addToIndex += `<tr>
      <td style="text-align:center;"><a href=/${apiName}index.html>${apiName}</a></td>
      <td style="text-align:center;">v1.0.0</td>
    </tr>
      `;
    }
  });
  return addToIndex;
};

const setMetadata = async (bucket) => exec.exec('gsutil', [
  'setmeta',
  '-h',
  'Cache-Control:no-store, max-age=0',
  `${bucket}index.html`,
], {
  silent: true,
});

const deployDocumentation = async (yaml, apiName, version, bucket) => {
  // version not yet implemented
  core.info(`Uploading api documentation for ${apiName}:${version}`);
  await installRedoc();
  await buildApiDocs(yaml, apiName);
  await uploadApiDocs(bucket, apiName);
  await fetchDocList(bucket)
    .then((apiList) => buildIndex(apiList, bucket)
      .then((addToIndex) => updateIndex('index.html', addToIndex)
        .then(uploadIndex('index.html', bucket))));

  await delay(2000);
  await setMetadata(bucket);
};

module.exports = deployDocumentation;
