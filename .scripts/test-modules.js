const path = require('path');
const fs = require('fs');
const { npmArgument, modules } = require('./modules');

const relative = (dir) => {
  const baseDir = path.join(__dirname, '..');
  return path.relative(baseDir, dir);
};

const generateSonarProperties = async () => {
  const sources = [];
  const tests = [
    'test-results/eslint/TEST-eslint.xml',
  ];
  const lcovReportPaths = [];
  const testReportPaths = [];

  const baseDir = path.join(__dirname, '..');

  await modules.each((dir) => {
    sources.push(relative(path.join(dir, 'src')));
    tests.push(relative(path.join(dir, 'test')));
    lcovReportPaths.push(relative(path.join(dir, 'coverage', 'lcov.info')));
    testReportPaths.push(relative(path.join(dir, 'test-results', 'test-report.xml')));
  });

  const properties = `# Generated by 'npm test'
sonar.sourceEncoding=UTF-8
sonar.projectKey=extenda_actions
sonar.projectName=actions
sonar.sources=${sources.join(',')}
sonar.tests=${tests.join(',')}
sonar.javascript.lcov.reportPaths=${lcovReportPaths.join(',')}
sonar.testExecutionReportPaths=${testReportPaths.join(',')}
`;

  fs.writeFileSync(path.join(__dirname, '..', 'sonar-project.properties'), properties, 'utf-8');
};

(async () => {
  await modules.exec(`npm ${npmArgument}`)
    .then(() => generateSonarProperties());
})();
