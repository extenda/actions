const path = require('path');
const fs = require('fs');
const { npmArgument, modules } = require('./modules');

const relative = (dir) => {
  const baseDir = path.join(__dirname, '..');
  return path.relative(baseDir, dir);
};

const ifExists = (file, fn) => {
  if (fs.existsSync(file)) {
    fn(file);
  }
};

const generateSonarProperties = async () => {
  const sources = [];
  const tests = [];
  const lcovReportPaths = [];
  const testReportPaths = [];

  await modules.each((dir) => {
    ifExists(relative(path.join(dir, 'src')), (p) => sources.push(p));
    ifExists(relative(path.join(dir, 'test')), (p) => tests.push(p));
    ifExists(relative(path.join(dir, 'coverage', 'lcov.info')), (p) => lcovReportPaths.push(p));
    ifExists(relative(path.join(dir, 'test-results', 'sonar-report.xml')), (p) => testReportPaths.push(p));
  });

  const properties = `# Generated by 'npm test'
sonar.sourceEncoding=UTF-8
sonar.projectKey=extenda_actions
sonar.projectName=actions
sonar.sources=${sources.join(',')}
sonar.exclusions=**/__mocks__/**
sonar.tests=${tests.join(',')}
sonar.javascript.lcov.reportPaths=${lcovReportPaths.join(',')}
sonar.testExecutionReportPaths=${testReportPaths.join(',')}
`;

  fs.writeFileSync(path.join(__dirname, '..', 'sonar-project.properties'), properties, 'utf-8');
};

(async () => {
  await modules.exec(`npm ${npmArgument}`)
    .then(() => generateSonarProperties());
})();
