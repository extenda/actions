const exec = require('@actions/exec');
const core = require('@actions/core');
const notifySlack = require('../../slack-notify/src/slack-notify');

const runImageScan = async (image, ignoreUnfixed) => {
  let output = '';
  await exec.exec(
    'trivy',
    ignoreUnfixed === true ? ['--timeout=600s', '--ignore-unfixed', '--light', '-o', 'scanReport.scan', image] : ['--timeout=600s', '--light', image],
    {
      silent: true,
      listeners: {
        stdout: (data) => {
          output += data.toString('utf8');
        },
      },
    },
  );
  return output;
};

const buildReport = async (scanResults, image) => {
  let results = [];
  const totResults = [0, 0, 0, 0, 0, 0];
  for (let i = 0; i < scanResults.length; i += 1) {
    const line = scanResults[i];
    if (line.startsWith('Total:')) {
      results = line.match(/Total: ([0-9]+) \(UNKNOWN: ([0-9]+), LOW: ([0-9]+), MEDIUM: ([0-9]+), HIGH: ([0-9]+), CRITICAL: ([0-9]+)\)/);
      totResults[0] += parseInt(results[1], 10);
      totResults[1] += parseInt(results[2], 10);
      totResults[2] += parseInt(results[3], 10);
      totResults[3] += parseInt(results[4], 10);
      totResults[4] += parseInt(results[5], 10);
      totResults[5] += parseInt(results[6], 10);
    }
  }

  return {
    MESSAGE: `Total vulnerabilities found on ${image}: ${totResults[0]}
  Unknown: ${totResults[1]}
  Low: ${totResults[2]}
  Medium: ${totResults[3]}
  High: ${totResults[4]}
  Critical: ${totResults[5]}
  `,
    HIGH: totResults[4],
    CRITICAL: totResults[5],
  };
};

const installTrivy = async () => {
  await exec.exec('wget', [
    'https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.deb',
  ], {
    silent: true,
  });
  await exec.exec('sudo dpkg', [
    '-i',
    'trivy_0.20.0_Linux-64bit.deb',
  ], {
    silent: true,
  });
};

const scanImage = async (image, ignoreUnfixed) => {
  let rerunScan = false;
  let output = await runImageScan(image, ignoreUnfixed)
    .catch(() => {
      rerunScan = true;
    });
  // temporary fix, rerun scan on error
  if (rerunScan) {
    output = await runImageScan(image, ignoreUnfixed).catch((err) => {
      throw new Error(err);
    });
  }
  const scanResult = output.split(/[\r\n]+/);
  const report = await buildReport(scanResult, image);
  if (!ignoreUnfixed) {
    core.info(report.MESSAGE);
    core.startGroup('full vulnerability scan report');
    core.info(output);
    core.endGroup();
  }
  return report;
};

const sendSlackAlert = async (serviceAccount, report) => {
  if (report.CRITICAL > 0 || report.HIGH > 0) {
    await notifySlack(serviceAccount, report.MESSAGE, '', 'scanReport.scan');
  }
};

const runScan = async (serviceAccount, image) => installTrivy()
  .then(() => scanImage(image, false)
    .then(() => scanImage(image, true)
      .then((report) => sendSlackAlert(serviceAccount, report).catch((err) => {
        core.info('Unable to notify slack channel! Make sure your credentials are correctly stored in your clan secret manager!');
        core.info(err.message);
      }))));

module.exports = runScan;
