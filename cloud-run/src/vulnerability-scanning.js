const exec = require('@actions/exec');
const core = require('@actions/core');
const notifySlack = require('../../slack-notify/src/slack-notify');

// 1. download trivvy and install bin
const installTrivy = async () => {
  await exec.exec('wget', [
    'https://github.com/aquasecurity/trivy/releases/download/v0.15.0/trivy_0.15.0_Linux-64bit.deb',
  ], {
    silent: true,
  });
  await exec.exec('sudo dpkg', [
    '-i',
    'trivy_0.15.0_Linux-64bit.deb',
  ], {
    silent: true,
  });
};
// 2. run trivvy scan on image
const scanImage = async (image) => {
  let output = '';
  await exec.exec('trivy', [
    '-o',
    'scanReport.scan',
    image,
  ], {
    silent: false,
    listeners: {
      stdout: (data) => {
        output += data.toString('utf8');
      },
    },
  }).catch(() => {
    // temporary fix, rerun scan on error
    exec.exec('trivy', [
      '-o',
      'scanReport.scan',
      image,
    ], {
      silent: false,
      listeners: {
        stdout: (data) => {
          output += data.toString('utf8');
        },
      },
    });
  });
  return output.split(/[\r\n]+/);
};

// 3. parse issues
const buildReport = async (scanResults) => {
  let results = [];
  for (let i = 0; i < scanResults.length; i += 1) {
    const line = scanResults[i];
    if (line.startsWith('Total:')) {
      results = line.match(/Total: ([0-9]+) \(UNKNOWN: ([0-9]+), LOW: ([0-9]+), MEDIUM: ([0-9]+), HIGH: ([0-9]+), CRITICAL: ([0-9]+)\)/);
    }
  }
  return {
    TOTAL: results[1],
    UNKNOWN: results[2],
    LOW: results[3],
    MEDIUM: results[4],
    HIGH: results[5],
    CRITICAL: results[6],
  };
};

// 4. notify with slack message
const sendSlackAlert = async (serviceAccount, report, image) => {
  const text = `Total vulnerabilities found on ${image}: ${report.TOTAL}
Unknown: ${report.UNKNOWN}
Low: ${report.LOW}
Medium: ${report.MEDIUM}
High: ${report.HIGH}
Critical: ${report.CRITICAL}
`;
  core.info(text);
  if (report.CRITICAL > 0 || report.HIGH > 0 || report.TOTAL > 10) {
    await notifySlack(serviceAccount, text, '', 'scanReport.scan');
  }
};

const runScan = async (serviceAccount, image) => installTrivy()
  .then(() => scanImage(image)
    .then((scanResults) => buildReport(scanResults)
      .then((report) => sendSlackAlert(serviceAccount, report, image))));

module.exports = runScan;
