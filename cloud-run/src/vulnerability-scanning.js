const exec = require('@actions/exec');
const core = require('@actions/core');
const sendMessage = require('../../slack-message/src/sendMessage');

// 1. download trivvy and install bin
const installTrivy = async () => {
  await exec.exec('apt-get', [
    'update'
  ], {
    silent: false,
  });
  await exec.exec('apt-get', [
    '--assume-yes',
    'install',
    'curl'
  ], {
    silent: false,
  });
  await exec.exec('curl', [
    '-sfL',
    'https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh',
    '|',
    'sh',
    '-s',
    '--',
    '-b',
    '/usr/local/bin',
  ], {
    silent: false,
  });
// 2. run trivvy scan on image
const scanImage = async (image) => {
  let output = '';
  await exec.exec('trivy', [
    image,
  ], {
    silent: true,
    listeners: {
      stdout: (data) => {
        output += data.toString('utf8');
      },
    },
  });
  return output.split(/[\r\n]+/);
};

// 3. parse issues
const buildReport = async (scanResults) => {
  let results = [];
  for (let i = 0; i < scanResults.length; i += 1) {
    const line = scanResults[i];
    if (line.startsWith('Total:')) {
      results = line.match(/Total: ([0-9]+) \(UNKNOWN: ([0-9]+), LOW: ([0-9]+), MEDIUM: ([0-9]+), HIGH: ([0-9]+), CRITICAL: ([0-9]+)\)/);
    }
  }
  return {
    TOTAL: results[1],
    UNKNOWN: results[2],
    LOW: results[3],
    MEDIUM: results[4],
    HIGH: results[5],
    CRITICAL: results[6],
  };
};

// 4. notify with slack message
const notifySlack = async (report, image) => {
  const title = 'Image vulnerability report:';
  const text = `Total vulnerabilities found on ${image}: ${report.TOTAL}
Unknown: ${report.UNKNOWN}
Low:\t ${report.LOW}
Medium:\t ${report.MEDIUM}
High:\t ${report.HIGH}
Critical:${report.CRITICAL}
`;
  core.info(text);
  sendMessage(title, text, '');
};

const runScan = async (image) => installTrivy()
  .then(() => scanImage(image)
    .then((scanResults) => buildReport(scanResults)
      .then((report) => notifySlack(report, image))));

module.exports = runScan;
