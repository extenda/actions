jest.mock('@actions/exec');
jest.mock('@actions/core');
jest.mock('../../slack-notify/src/slack-notify');
const exec = require('@actions/exec');
const scan = require('../src/vulnerability-scanning');

describe('Run scan and notify on slack', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  test('Can run scan without issues', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    await scan('service-account', 'ubuntu');
    expect(exec.exec).toHaveBeenCalledTimes(3);
  });

  test('Can run scan with scan error', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockRejectedValueOnce('scan could not be completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    await scan('service-account', 'ubuntu');
    expect(exec.exec).toHaveBeenCalledTimes(4);
  });
});
