jest.mock('@actions/exec');
jest.mock('@actions/core');
jest.mock('../../slack-notify/src/slack-notify');
const exec = require('@actions/exec');
const scan = require('../src/vulnerability-scanning');
const slackNotify = require('../../slack-notify/src/slack-notify');

describe('Run scan and notify on slack', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  test('Can run scan without issues', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    await scan('service-account', 'ubuntu');
    expect(exec.exec).toHaveBeenCalledTimes(4);
  });

  test('Can run scan with scan error', async () => {
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockRejectedValueOnce('scan could not be completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    await scan('service-account', 'ubuntu');
    expect(exec.exec).toHaveBeenCalledTimes(5);
  });

  test('Can run scan even when slackNotify fails', async () => {
    slackNotify.mockRejectedValueOnce(new Error('Couldn\'t fetch slack secrets!'));
    const result = `eu.gcr.io/extenda/iam-das-sync-worker:v0.3.2 (debian 9.13)
==========================================================
Total: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 2, CRITICAL: 1)

usr/src/app/package-lock.json
=============================
Total: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)`;
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockImplementationOnce((
      cmd, args, opts,
    ) => opts.listeners.stdout(result));
    await expect(scan('service-account', 'ubuntu')).resolves.not.toThrow();
    expect(slackNotify).toHaveBeenCalledTimes(1);
    expect(slackNotify).toHaveBeenCalledWith(
      'service-account',
      'Total vulnerabilities found on ubuntu: 5\n'
          + '  Unknown: 0\n'
          + '  Low: 1\n'
          + '  Medium: 2\n'
          + '  High: 3\n'
          + '  Critical: 1\n'
          + '  ',
      '',
      'scanReport.scan',
    );
    expect(exec.exec).toHaveBeenCalledTimes(4);
  });

  test('Build report correctly', async () => {
    const result = `eu.gcr.io/extenda/iam-das-sync-worker:v0.3.2 (debian 9.13)
==========================================================
Total: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 2, CRITICAL: 1)

usr/src/app/package-lock.json
=============================
Total: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)`;
    exec.exec.mockResolvedValueOnce('download trivy completed');
    exec.exec.mockResolvedValueOnce('trivy install completed');
    exec.exec.mockResolvedValueOnce('scan completed');
    exec.exec.mockImplementationOnce((
      cmd, args, opts,
    ) => opts.listeners.stdout(result));
    await scan('service-account', 'ubuntu');
    expect(slackNotify).toHaveBeenCalledTimes(1);
    expect(slackNotify).toHaveBeenCalledWith(
      'service-account',
      'Total vulnerabilities found on ubuntu: 5\n'
          + '  Unknown: 0\n'
          + '  Low: 1\n'
          + '  Medium: 2\n'
          + '  High: 3\n'
          + '  Critical: 1\n'
          + '  ',
      '',
      'scanReport.scan',
    );
    expect(exec.exec).toHaveBeenCalledTimes(4);
  });
});
